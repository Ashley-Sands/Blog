// Json format discription.

{
    "header": "Example",                        // Content to format into the header
    "subHeader": "Im Am Example",               // Content to format into the sub header
    "contentTemplate": {                        // (optional) html template to load the content into
        "name": null,                               // name of template
        "URL": null                                 // url for template
    },

    // Content to be loaded into the template if supplied.
    // If the template is null (or not supplied) content must be
    // a list of strings which is formated directly into the 
    // html content element.
    // Otherwise content should be a list of objects (dicts)
    // where the keys == the format key ie '[key]' == '{key}'
    // each object repersents a single template that will all
    // be formated into the html content element.
    "content": [                // No Template Method
        "No template method",
        "an other line"
    ],
    "content": [                // Template Method
        { 
            "message": " message to be formated into the first template",
            "image": "<image src='example.png' />",
            "$txtContent": { "me": "myTextFile.txt" }           // (optinal) keys starting with $ are not formated in. Rather it formats the contents of file into {key}
        },
    ],
    "jsFunction": [                             // (Optional) list of functions to be trigger once page has compleated loading.
        "functionOne",                          // Functions must have no params or only params with defaults
        "functionTwo"
    ]

==============================================================================================================
# Propsals

==============================================================================================================
### Propsed json elements
#### Additional content

    ${itemName}     | Additional content to be loaded.
                    | ie.
    
    To solve the issue of having large bodys of text in json files, there sould be a method to
    load additional content from txt or md files.

    Additional content must be define within the json object, contatining the url/path, if it should 
    be pre loaded and wether or not it should be parsed from md. eg.

    "additionalContent": {
        "itemName": {
            "url": "url/path",
            "preLoad": false,
            "parseMd": False 
        }
    }

    The additional content should be defined in the content string using ${additionalContent-ItemName}
    eg. (using the defined additionalContent above)

    "content": [
        {
            "title": "Example Content using additional content",
            "body": "${itemName}"
        }
    ]

    This would format the content at 'additionalContent.itemName.url' into '${itemName}'
    Parsing from md as necessary.

    The problum with this is how and when should the additional content be loaded
    without holding back the user for to long. As we dont know what additional data 
    needs to be loaded until the inital json payload is returned, not forgeting that 
    we need to load in templates if not already loaded and cached.

    To combat that, there needs to be a farly large change to the way that we handle content
    loaded via ajax. 

    To start with there will a ContentObject introduced, to replace the current template
    cacheing, then the ContentObject will be made available to all content.

    The ContentObject is responcable for the content 'url', ref to the 'callback' function,
    the owning 'parent', if 'isTemplate' or not, the 'responce', along with 'loaded', 'error' 
    and 'canceled'. Which is stored into the content cache.

    The ContentObject is then be passed into the ContentLoader where the responce will be 
    updated when ready, setting the loaded flag, also triggering the callback if useable.
    (Content is consisdered useable if the parent is null or useable and it is loaded, 
    no error and not canceled). The callback parmas can be changed to ContentObject as it
    containes all the required info.

    If an object is not useable after loading (without being in an error/canceled state),
    it will be waiting for the parent to complete loading. In which case the parent callback 
    must trigger child callbacks.

    Because of this we can also remove the responceQueue, as if ContentObject if set to 
    isTemplate and the parent is set we know that we need to call the parent callback 
    once the template is loaded (also usetting the parent, as templates are cached for the
    duration of the users visit).

    Futhermore, we can remove the LoadHTMLContent function as well, since we can supply a 
    HTML handler as the callback, meaning we have more felixablity and controle in the long 
    run over the current approch.

    Caching is a dificult one, to start all template are cached for the duration of the visit,
    (for now at leaset, we only have 3 and there tiny), but json and additionalContent is another 
    story. For now when a user navigates away from the page, the page json and additinalContent
    will be unloaded, but we'll see what happens.

    It might be worth adding 'cache' to the json file, so we know weather or not to cache when
    the user navigates aways from the page.

    Negatives for the system, is we use more memory along with having to load multiple pices of content
    but the positives out-weigh the negitives in the long run.

    To be far most sites proberly load multiple pices of content these days and we are very unlikey to
    use extream amounts of memory even with excessive cache as we only cache text.

    On the other hand this allows us to load additinal content before the parent has finised parsing,
    reducing content bottle necks, faster loading times when returning to pages and much greater 
    felexiblity over content sources and content formating. (especially with the md parser)

    Eg. with the addision of 'additinal content' we can load content from github directly into
    web pages.
    
==============================================================================================================
// vars
==============================================================================================================

    $[json.path.0]    | path to json element.
                    | use json element as a var (path must be in current json).
                    | ie. we could use the header in the content
    "content": [
        "$[header] is a short demonstration of this json file :)"
    ]

    This would output: Example is a short demonstration of this json file :)

    regex to extract:
    \$\[(([a-zA-Z]+|[0-9]+)\.)*([a-zA-Z]+|[0-9]+){1}\]


// Side Content. (Idea Rejected, for now at least.)

    "sideContent": {
        "mode": "CONTENT",                          | this can either be 'CONTENT' or 'ITEMS'           // This seams a bit much but we'll see.
                                                    | CONTENT:  Generates an item for each content
                                                    | ITEMS:    sideContent.content is to be treaded as a list of items like content
        "template": "side-blog",                    | side content template name
        "content": {                                | the content.
            "hash":   "$[content.name]",
            "header": "$[content.name]",
            "posted": "$[content.date]"
        }
    }

Rather then add items to the side pannle, im going to move tab/cards/items from content to the side pannle.
while content will display the content for that tab/card/item.

If i cant do what i need with CSS this may be reconsidered but hopfully it wont come to that.
so i might have to toggle between content elements and side elements.
