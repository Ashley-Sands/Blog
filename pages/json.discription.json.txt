// Json format discription.

{
    "header": "Example",                        // Content to format into the header
    "subHeader": "Im Am Example",               // Content to format into the sub header
    "contentTemplate": {                        // (optional) html template to load the content into
        "name": null,                               // name of template
        "URL": null                                 // url for template
    },

    // Content to be loaded into the template if supplied.
    // If the template is null (or not supplied) content must be
    // a list of strings which is formated directly into the 
    // html content element.
    // Otherwise content should be a list of objects (dicts)
    // where the keys == the format key ie '[key]' == '{key}'
    // each object repersents a single template that will all
    // be formated into the html content element.
    "content": [                // No Template Method
        "No template method",
        "an other line"
    ],
    "content": [                // Template Method
        { 
            "message": " message to be formated into the first template",
            "image": "<image src='example.png' />",
            "$txtContent": { "me": "myTextFile.txt" }           // (optinal) keys starting with $ are not formated in. Rather it formats the contents of file into {key}
        },
    ],
    "jsFunction": [                             // (Optional) list of functions to be trigger once page has compleated loading.
        "functionOne",                          // Functions must have no params or only params with defaults
        "functionTwo"
    ]

///////////////////////////////
// Propsed json elements
// Additional content

    ${itemName}     | Additional content to be loaded.
                    | ie.

    "additionalContent": {
        "itemName": {
            "url": "url/path",
            "parseMd": False 
        }
    }
    
    the '${itemName}' would be replaced with a span element for the content to be loaded into.
    additionalContent would use Common.LoadHTMLContent so the data is added to HTML rather than
    replacing a string once loaded.

    '${itemName}' would be replaced with '<span></span>' the span element is passed directly into 
    LoadHTMLContent
    Also additionalContent is the method intended to load in MD files.
    


    this idea behid this is to load in large amount of text, that are not sutable for json

// vars

    $[json.path.0]    | path to json element.
                    | use json element as a var (path must be in current json).
                    | ie. we could use the header in the content
    "content": [
        "$[header] is a short demonstration of this json file :)"
    ]

    This would output: Example is a short demonstration of this json file :)

    regex to extract:
    \$\[(([a-zA-Z]+|[0-9]+)\.)*([a-zA-Z]+|[0-9]+){1}\]


// Side Content. (Idea Rejected, for now at least.)

    "sideContent": {
        "mode": "CONTENT",                          | this can either be 'CONTENT' or 'ITEMS'           // This seams a bit much but we'll see.
                                                    | CONTENT:  Generates an item for each content
                                                    | ITEMS:    sideContent.content is to be treaded as a list of items like content
        "template": "side-blog",                    | side content template name
        "content": {                                | the content.
            "hash":   "$[content.name]",
            "header": "$[content.name]",
            "posted": "$[content.date]"
        }
    }

Rather then add items to the side pannle, im going to move tab/cards/items from content to the side pannle.
while content will display the content for that tab/card/item.

If i cant do what i need with CSS this may be reconsidered but hopfully it wont come to that.
so i might have to toggle between content elements and side elements.
